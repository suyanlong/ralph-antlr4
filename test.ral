Contract Math() {
    @using(readonly = true)
    pub fn pow(x: U256, y: U256) -> (U256) {
        let mut i = 0
        let mut result = 1
        while (i < y) {
            result = result * x
            i = i + 1
        }
        return result
    }

    @using(readonly = true)
    pub fn normalizeAmount(amount: U256, decimals: U256) -> (U256) {
        if (decimals > 8) {
            return amount / pow(10, decimals - 8)
        }
        return amount
    }

    pub fn deNormalizeAmount(amount: U256, decimals: U256) -> (U256) {
        if (decimals > 8) {
            return amount * pow(10, decimals - 8)
        }
        return amount
    }
}

Contract MetaData() {
    @using(preapprovedAssets = true, assetsInContract = false)
    pub fn foo() -> () {
        transferAlph!(callerAddress!(), callerAddress!(), 1 alph)
        return
    }

    @using(preapprovedAssets = false, assetsInContract = true)
    fn bar() -> () {
        transferAlphToSelf!(selfAddress!(), 1 alph)
        return
    }

    @using(readonly = true)
    fn baz() -> () {
        return
    }
}

Contract Warnings(@unused a: U256, b: U256) {
    const C = 0

    @using(readonly = true)
    pub fn foo(@unused x: U256, y: U256) -> () {
        return
    }
}



